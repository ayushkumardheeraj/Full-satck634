//1. server.js

import express from "express";
import mongoose from "mongoose";
import dotenv from "dotenv";
import transferRoute from "./routes/transfer.js";

dotenv.config();
const app = express();

app.use(express.json());

// MongoDB Connection
mongoose
  .connect(process.env.MONGO_URI || "mongodb://localhost:27017/transferdb")
  .then(() => console.log("✅ MongoDB Connected"))
  .catch((err) => console.error("❌ MongoDB connection error:", err));

// Routes
app.use("/api", transferRoute);

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`🚀 Server running on port ${PORT}`));


//2. models/user.js
import mongoose from "mongoose";

const userSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
  },
  balance: {
    type: Number,
    required: true,
    min: 0,
  },
});

const User = mongoose.model("User", userSchema);

export default User;

//3. routrs/transfer.js
import express from "express";
import User from "../models/User.js";

const router = express.Router();

/**
 * @route   POST /api/transfer
 * @desc    Transfer amount between two accounts
 * @body    { fromId, toId, amount }
 */
router.post("/transfer", async (req, res) => {
  try {
    const { fromId, toId, amount } = req.body;

    // Basic validation
    if (!fromId || !toId || !amount)
      return res.status(400).json({ error: "Missing required fields" });

    if (fromId === toId)
      return res.status(400).json({ error: "Cannot transfer to the same account" });

    if (amount <= 0)
      return res.status(400).json({ error: "Transfer amount must be positive" });

    // Step 1: Fetch sender and receiver
    const sender = await User.findById(fromId);
    const receiver = await User.findById(toId);

    if (!sender) return res.status(404).json({ error: "Sender account not found" });
    if (!receiver) return res.status(404).json({ error: "Receiver account not found" });

    // Step 2: Validate balance
    if (sender.balance < amount)
      return res.status(400).json({ error: "Insufficient balance" });

    // Step 3: Update balances logically
    sender.balance -= amount;
    receiver.balance += amount;

    // Step 4: Save updates sequentially (no transaction)
    await sender.save();
    await receiver.save();

    return res.status(200).json({
      message: "Transfer successful",
      from: { id: sender._id, newBalance: sender.balance },
      to: { id: receiver._id, newBalance: receiver.balance },
    });
  } catch (err) {
    console.error("Transfer error:", err);
    res.status(500).json({ error: "Server error" });
  }
});

export default router;
